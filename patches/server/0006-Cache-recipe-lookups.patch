From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Date: Wed, 7 Oct 2020 16:54:50 -0700
Subject: [PATCH] Cache recipe lookups

Store recipes in a cache to speed up future lookups, as well as replace a stream in craft() to increase execution speed.

This patch was originally created for the Yatopia project by Mykyta Komarnytskyy <nkomarn@hotmail.com> under the MIT license.

diff --git a/src/main/java/net/minecraft/server/CraftingManager.java b/src/main/java/net/minecraft/server/CraftingManager.java
index 58ecbe1e20581dc9e78cdd2f4ece29cfa014da8a..a54935f5e46e121109a7207128898607f588e2fe 100644
--- a/src/main/java/net/minecraft/server/CraftingManager.java
+++ b/src/main/java/net/minecraft/server/CraftingManager.java
@@ -31,6 +31,10 @@ public class CraftingManager extends ResourceDataJson {
     private static final Logger LOGGER = LogManager.getLogger();
     public Map<Recipes<?>, Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>>> recipes = ImmutableMap.of(); // CraftBukkit
     private boolean d;
+    // Hydrinity start
+    private static final List<IRecipe<?>> ALL_RECIPES_CACHE = new java.util.ArrayList<>();
+    private static final Object2ObjectLinkedOpenHashMap<Recipes<?>, List<IRecipe<?>>> TYPES_CACHE = new Object2ObjectLinkedOpenHashMap<>();
+    // Hydrinity end
 
     public CraftingManager() {
         super(CraftingManager.a, "recipes");
@@ -66,6 +70,11 @@ public class CraftingManager extends ResourceDataJson {
         this.recipes = (Map) map1.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> {
             return entry1.getValue(); // CraftBukkit // Paper - decompile fix - *shrugs internally*
         }));
+        // Hydrinity start - cache all recipes for fast access in b()
+        for (Object2ObjectLinkedOpenHashMap<MinecraftKey, IRecipe<?>> recipesMap : map1.values()) {
+            ALL_RECIPES_CACHE.addAll(recipesMap.values());
+        }
+        // Hydrinity end
         CraftingManager.LOGGER.info("Loaded {} recipes", map1.size());
     }
 
@@ -79,23 +88,35 @@ public class CraftingManager extends ResourceDataJson {
         } else {
             map.putAndMoveToFirst(irecipe.getKey(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
         }
+        ALL_RECIPES_CACHE.add(irecipe); // Hydrinity
     }
     // CraftBukkit end
 
     public <C extends IInventory, T extends IRecipe<C>> Optional<T> craft(Recipes<T> recipes, C c0, World world) {
         // CraftBukkit start
-        Optional<T> recipe = this.b(recipes).values().stream().flatMap((irecipe) -> {
-            return SystemUtils.a(recipes.a(irecipe, world, c0));
-        }).findFirst();
+        // Hydrinity start - replace stream
+        Collection<IRecipe<C>> allTypes = this.b(recipes).values();
+        Optional<T> recipe = Optional.empty();
+
+        for (IRecipe<C> possible : allTypes) {
+            Optional<T> possibleRecipe = recipes.a(possible, world, c0);
+            if (possibleRecipe.isPresent()) {
+                recipe = possibleRecipe;
+                break;
+            }
+        }
+        // Hydrinity end
         c0.setCurrentRecipe(recipe.orElse(null)); // CraftBukkit - Clear recipe when no recipe is found
         // CraftBukkit end
         return recipe;
     }
 
     public <C extends IInventory, T extends IRecipe<C>> List<T> a(Recipes<T> recipes) {
-        return (List) this.b(recipes).values().stream().map((irecipe) -> {
-            return irecipe;
-        }).collect(Collectors.toList());
+        // Hydrinity start - use recipe cache when possible
+        return (List) TYPES_CACHE.computeIfAbsent(recipes, recipes1 -> {
+           return new java.util.ArrayList<>(this.b(recipes).values());
+        });
+        // Hydrinity end
     }
 
     public <C extends IInventory, T extends IRecipe<C>> List<T> b(Recipes<T> recipes, C c0, World world) {
@@ -133,9 +154,7 @@ public class CraftingManager extends ResourceDataJson {
     }
 
     public Collection<IRecipe<?>> b() {
-        return (Collection) this.recipes.values().stream().flatMap((map) -> {
-            return map.values().stream();
-        }).collect(Collectors.toSet());
+        return ALL_RECIPES_CACHE; // Hydrinity
     }
 
     public Stream<MinecraftKey> d() {
@@ -155,6 +174,10 @@ public class CraftingManager extends ResourceDataJson {
     // CraftBukkit start
     public void clearRecipes() {
         this.recipes = Maps.newHashMap();
+        // Hydrinity start
+        ALL_RECIPES_CACHE.clear();
+        TYPES_CACHE.clear();
+        // Hydrinity end
 
         for (Recipes<?> recipeType : IRegistry.RECIPE_TYPE) {
             this.recipes.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
