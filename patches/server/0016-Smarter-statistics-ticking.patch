From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Date: Thu, 22 Oct 2020 18:32:23 -0700
Subject: [PATCH] Smarter statistics ticking

In vanilla, statistics that count time spent for an action (i.e. time played or sneak time) are incremented every tick. This is retarded. With this patch and a configured interval of 20, the statistics are only ticked every 20th tick and are incremented by 20 ticks at a time. This means a lot less ticking with the same accurate counting.

With an interval of 20, this patch saves roughly 3ms per tick on a server w/ 80 players online.

This patch was created for the Hydrinity project <https://github.com/Hydrinity/Hydrinity> by Mykyta Komarnytskyy <nkomarn@hotmail.com> under the MIT license.

diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
index caaa01b20e5b7430b809477022f8ab35f3c5bf20..ea56f4d9de9e1c6acc3436b9ff4ea702ddffc77b 100644
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -162,18 +162,22 @@ public abstract class EntityHuman extends EntityLiving {
         this.p();
         if (!this.world.isClientSide) {
             this.foodData.a(this);
-            this.a(StatisticList.PLAY_ONE_MINUTE);
+            // Hydrinity start - smarter statistics tracking
+            int interval = xyz.nkomarn.hydrinity.HydrinityConfig.playerTimeStatisticsInterval;
+            if (ticksLived % interval == 0) {
+            this.a(StatisticList.PLAY_ONE_MINUTE, interval);
             if (this.isAlive()) {
-                this.a(StatisticList.TIME_SINCE_DEATH);
+                this.a(StatisticList.TIME_SINCE_DEATH, interval);
             }
 
             if (this.bx()) {
-                this.a(StatisticList.SNEAK_TIME);
+                this.a(StatisticList.SNEAK_TIME, interval);
             }
 
             if (!this.isSleeping()) {
-                this.a(StatisticList.TIME_SINCE_REST);
+                this.a(StatisticList.TIME_SINCE_REST, interval);
             }
+            } // Hydrinity end
         }
 
         int i = 29999999;
diff --git a/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java b/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
index 3a44de1ec1e4a7d9cfe895b2c2375d4961e72372..071c9259d93a2ad628a3c0ff2b439187122399df 100644
--- a/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
+++ b/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
@@ -115,6 +115,11 @@ public class HydrinityConfig {
         criterionTriggerTick = getBoolean("settings.criterion-triggers.tick", true);
     }
 
+    public static int playerTimeStatisticsInterval = 1;
+    private static void intervals() {
+        playerTimeStatisticsInterval = Math.max(1, getInt("settings.intervals.player-time-statistics", 1));
+    }
+
     public static final class WorldConfig {
 
         public final String worldName;
