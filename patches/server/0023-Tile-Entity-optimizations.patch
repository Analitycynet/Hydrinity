From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Date: Fri, 30 Oct 2020 20:13:08 -0700
Subject: [PATCH] Tile Entity optimizations

This patch includes various tile entity optimizations. Normally, these aren't going to improve performance much, but can be useful if you have loads of tile entities or they are being used as building blocks.

This patch was created for the Hydrinity project <https://github.com/Hydrinity/Hydrinity> by Mykyta Komarnytskyy <nkomarn@hotmail.com> under the MIT license.

diff --git a/src/main/java/net/minecraft/server/TileEntityBeacon.java b/src/main/java/net/minecraft/server/TileEntityBeacon.java
index c6b7bc3dc1445269c1562c308b386ce480d70ef3..0b77e8ff22da042772c0bfe71c9c3fdfa92782be 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeacon.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeacon.java
@@ -143,7 +143,7 @@ public class TileEntityBeacon extends TileEntity implements ITileInventory, ITic
         }
 
         i1 = this.levels;
-        if (this.world.getTime() % 80L == 0L) {
+        if (xyz.nkomarn.hydrinity.util.MathUtils.fastMod((int) world.getTime(), 80) == 0) { // Hydrinity
             if (!this.c.isEmpty()) {
                 this.a(i, j, k);
             }
diff --git a/src/main/java/net/minecraft/server/TileEntityBeehive.java b/src/main/java/net/minecraft/server/TileEntityBeehive.java
index a60e0872d51aeb330bd5334e35f18ad0ed63834e..0262dfe3e3dc9fbd0c2d4754a28b9603672685b6 100644
--- a/src/main/java/net/minecraft/server/TileEntityBeehive.java
+++ b/src/main/java/net/minecraft/server/TileEntityBeehive.java
@@ -286,6 +286,7 @@ public class TileEntityBeehive extends TileEntity implements ITickable {
 
     @Override
     public void tick() {
+        if (this.bees.size() == 0) return; // Hydrinity - TE optimizations
         if (!this.world.isClientSide) {
             this.y();
             BlockPosition blockposition = this.getPosition();
diff --git a/src/main/java/net/minecraft/server/TileEntityEnchantTable.java b/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
index 9b0c75332d9815657d96183e51e40cf14ee3ed75..76b120c2b2309f3d4557264cbb0b801c0f18c49e 100644
--- a/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
+++ b/src/main/java/net/minecraft/server/TileEntityEnchantTable.java
@@ -3,7 +3,7 @@ package net.minecraft.server;
 import java.util.Random;
 import javax.annotation.Nullable;
 
-public class TileEntityEnchantTable extends TileEntity implements INamableTileEntity, ITickable {
+public class TileEntityEnchantTable extends TileEntity implements INamableTileEntity { // Hydrinity - don't tick enchanting tables
 
     public int a;
     public float b;
@@ -41,7 +41,7 @@ public class TileEntityEnchantTable extends TileEntity implements INamableTileEn
 
     }
 
-    @Override
+    // @Override // Hydrinity - don't tick enchanting tables
     public void tick() {
         this.j = this.i;
         this.l = this.k;
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index e463e9800c40101c3d32ca8aee4825ec89931a02..7c18c9853f7dda351876105ff79272a3be6ff2dc 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -811,13 +811,18 @@ public abstract class World implements GeneratorAccess, AutoCloseable, ChunkRand
             if (!tileentity.isRemoved() && tileentity.hasWorld()) {
                 BlockPosition blockposition = tileentity.getPosition();
 
-                if (this.getChunkProvider().a(blockposition) && this.getWorldBorder().a(blockposition)) {
+                // Hydrinity start - TE optimizations
+                var chunk = tileentity.getCurrentChunk();
+                var playerchunk = chunk == null ? null : chunk.playerChunk;
+                if (playerchunk == null) continue;
+                if (playerchunk.isTickingReady() && this.getWorldBorder().a(blockposition)) {
                     try {
                         gameprofilerfiller.a(() -> {
                             return String.valueOf(TileEntityTypes.a(tileentity.getTileType()));
                         });
                         tileentity.tickTimer.startTiming(); // Spigot
-                        if (tileentity.getTileType().isValidBlock(this.getType(blockposition).getBlock())) {
+                        if (tileentity.getTileType().isValidBlock(chunk.getType(blockposition).getBlock())) {
+                            // Hydrinity end
                             ((ITickable) tileentity).tick();
                         } else {
                             tileentity.w();
@@ -851,9 +856,12 @@ public abstract class World implements GeneratorAccess, AutoCloseable, ChunkRand
                 this.tileEntityListTick.remove(tileTickPosition--);
                 // Spigot end
                 //this.tileEntityList.remove(tileentity); // Paper - remove unused list
-                if (this.isLoaded(tileentity.getPosition())) {
-                    this.getChunkAtWorldCoords(tileentity.getPosition()).removeTileEntity(tileentity.getPosition());
-                }
+                // Hydrinity start - TE optimizations
+                var chunk = tileentity.getCurrentChunk();
+                if (chunk == null) continue;
+                // if (this.isLoaded(tileentity.getPosition())) {
+                    chunk.removeTileEntity(tileentity.getPosition());
+                // } // Hydrinity end
             }
         }
 
@@ -872,8 +880,11 @@ public abstract class World implements GeneratorAccess, AutoCloseable, ChunkRand
                     }
                     // CraftBukkit end */
 
-                    if (this.isLoaded(tileentity1.getPosition())) {
-                        Chunk chunk = this.getChunkAtWorldCoords(tileentity1.getPosition());
+                    // Hydrinity start - TE optimizations
+                    var chunk = tileentity1.getCurrentChunk();
+                    if (chunk == null) continue;
+                    // if (this.isLoaded(tileentity1.getPosition())) {
+                        // Chunk chunk = this.getChunkAtWorldCoords(tileentity1.getPosition());
                         IBlockData iblockdata = chunk.getType(tileentity1.getPosition());
 
                         chunk.setTileEntity(tileentity1.getPosition(), tileentity1);
@@ -884,7 +895,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable, ChunkRand
                             this.a(tileentity1);
                         }
                         // CraftBukkit end
-                    }
+                    // } // Hydrinity end
                 }
             }
 
