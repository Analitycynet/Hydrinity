From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Date: Thu, 22 Oct 2020 19:21:44 -0700
Subject: [PATCH] Configurable entity check intervals

This patch adds a configuration options for how often the game runs some base entity checks. This includes suffocation damage and water checks. Suffocation checks use some fairly heavy block collision code and can be slowed down safely, improving overall entity performance substantially. Water checks can also be slowed down to bring moderate entity performance improvements.

A side effect of increasing the interval is slower suffocation damage. I find that a value of 10 works pretty well, but you can get away with 20 as well. Water checks seem balanced with a value of 10-20.

This patch was created for the Hydrinity project <https://github.com/Hydrinity/Hydrinity> by Mykyta Komarnytskyy <nkomarn@hotmail.com> under the MIT license.

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index b424f96b25f23a038ccf26eece8f0d1924224e85..7ef5ee8c36d14f0bd433f5290fcb9625bfadc724 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1334,14 +1334,19 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     }
 
+    // Hydrinity start
+    private boolean cachedFlag;
     protected boolean aJ() {
+        if (ticksLived % xyz.nkomarn.hydrinity.HydrinityConfig.entityWaterCheck != 0) {
         this.M.clear();
         this.aK();
         double d0 = this.world.getDimensionManager().isNether() ? 0.007D : 0.0023333333333333335D;
-        boolean flag = this.a((Tag) TagsFluid.LAVA, d0);
+        cachedFlag = this.a((Tag) TagsFluid.LAVA, d0);
+        }
 
-        return this.isInWater() || flag;
+        return this.isInWater() || cachedFlag;
     }
+    // Hydrinity end
 
     void aK() {
         if (this.getVehicle() instanceof EntityBoat) {
@@ -1361,6 +1366,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     private void m() {
+        if (ticksLived % xyz.nkomarn.hydrinity.HydrinityConfig.entitySubmergedCheck != 0) return; // Hydrinity
         this.N = this.a((Tag) TagsFluid.WATER);
         this.O = null;
         double d0 = this.getHeadY() - 0.1111111119389534D;
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 04eff01825bcf4cc38a749902065a5f54e73f1d7..51925d2a076e7792dde38e3d6a67cda494897b83 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -1542,11 +1542,13 @@ public abstract class EntityInsentient extends EntityLiving {
 
     public boolean isInDaylight() { return this.eG(); } // Paper - OBFHELPER
     protected boolean eG() {
+        // Hydrinity start - optimize entity daylight checks
+        if (ticksLived % xyz.nkomarn.hydrinity.HydrinityConfig.entityDaylightCheck != 0) return false;
         if (this.world.isDay() && !this.world.isClientSide) {
             float f = this.aQ();
-            BlockPosition blockposition = this.getVehicle() instanceof EntityBoat ? (new BlockPosition(this.locX(), (double) Math.round(this.locY()), this.locZ())).up() : new BlockPosition(this.locX(), (double) Math.round(this.locY()), this.locZ());
+            BlockPosition blockposition = this.getVehicle() instanceof EntityBoat ? (new BlockPosition(this.locX(), (double) Math.round(this.locY()) + 1, this.locZ())) : new BlockPosition(this.locX(), (double) Math.round(this.locY()), this.locZ());
 
-            if (f > 0.5F && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.world.e(blockposition)) {
+            if (f > 0.5F && this.world.e(blockposition)) { // Hydrinity end
                 return true;
             }
         }
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index bc4f84c8857aab45a69c915104de8d70b758698c..c7ca045a3481ceb82877fc9a8ff8e2c9f532afb7 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -82,7 +82,7 @@ public class EntityItem extends Entity {
 
             if (this.world.isClientSide) {
                 this.noclip = false;
-            } else {
+            } else if (ticksLived % xyz.nkomarn.hydrinity.HydrinityConfig.itemBlockCollisionCheck == 0) { // Hydrinity
                 this.noclip = !this.world.getCubes(this);
                 if (this.noclip) {
                     this.l(this.locX(), (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0D, this.locZ());
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 9ee74a39cbb624d6893045d4eed9624a616f78f8..450833e7f2dfd66cc54a478ba542b709c46e2e2b 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -268,7 +268,7 @@ public abstract class EntityLiving extends Entity {
         boolean flag = this instanceof EntityHuman;
 
         if (this.isAlive()) {
-            if (this.inBlock()) {
+            if (ticksLived % xyz.nkomarn.hydrinity.HydrinityConfig.entitySuffocationCheck == 0 && this.inBlock()) { // Hydrinity - configurable suffocation check interval
                 this.damageEntity(DamageSource.STUCK, 1.0F);
             } else if (flag && !this.world.getWorldBorder().a(this.getBoundingBox())) {
                 double d0 = this.world.getWorldBorder().a((Entity) this) + this.world.getWorldBorder().getDamageBuffer();
diff --git a/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java b/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
index 071c9259d93a2ad628a3c0ff2b439187122399df..9b340c2e8448ff3be2cd2596d295e799429559a3 100644
--- a/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
+++ b/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
@@ -116,8 +116,18 @@ public class HydrinityConfig {
     }
 
     public static int playerTimeStatisticsInterval = 1;
+    public static int entitySuffocationCheck = 1;
+    public static int entityWaterCheck = 1;
+    public static int entitySubmergedCheck = 1;
+    public static int entityDaylightCheck = 1;
+    public static int itemBlockCollisionCheck = 1;
     private static void intervals() {
         playerTimeStatisticsInterval = Math.max(1, getInt("settings.intervals.player-time-statistics", 1));
+        entitySuffocationCheck = Math.max(1, getInt("settings.intervals.entity-suffocation-check", 1));
+        entityWaterCheck = Math.max(1, getInt("settings.intervals.entity-water-check", 1));
+        entitySubmergedCheck = Math.max(1, getInt("settings.intervals.entity-submerged-check", 1));
+        entityDaylightCheck = Math.max(1, getInt("settings.intervals.entity-daylight-check", 1));
+        itemBlockCollisionCheck = Math.max(1, getInt("settings.intervals.item-block-collision-check", 1));
     }
 
     public static final class WorldConfig {
