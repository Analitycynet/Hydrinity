From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mykyta Komarnytskyy <nkomarn@hotmail.com>
Date: Thu, 22 Oct 2020 19:21:44 -0700
Subject: [PATCH] Configurable entity check intervals

This patch adds a configuration options for how often the game runs some base entity checks. This includes suffocation damage and water checks. Suffocation checks use some fairly heavy block collision code and can be slowed down safely, improving overall entity performance substantially. Water checks can also be slowed down to bring moderate entity performance improvements.

A side effect of increasing the interval is slower suffocation damage. I find that a value of 10 works pretty well, but you can get away with 20 as well. Water checks seem balanced with a value of 10-20.

This patch was created for the Hydrinity project <https://github.com/Hydrinity/Hydrinity> by Mykyta Komarnytskyy <nkomarn@hotmail.com> under the MIT license.

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index b424f96b25f23a038ccf26eece8f0d1924224e85..3a4d7979ac1f348932e72df3a336e96de3bea4e3 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1334,14 +1334,19 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
 
     }
 
+    // Hydrinity start
+    private boolean cachedFlag;
     protected boolean aJ() {
+        if (xyz.nkomarn.hydrinity.util.MathUtils.fastMod(ticksLived, xyz.nkomarn.hydrinity.HydrinityConfig.entityWaterCheck) != 0) {
         this.M.clear();
         this.aK();
         double d0 = this.world.getDimensionManager().isNether() ? 0.007D : 0.0023333333333333335D;
-        boolean flag = this.a((Tag) TagsFluid.LAVA, d0);
+        cachedFlag = this.a((Tag) TagsFluid.LAVA, d0);
+        }
 
-        return this.isInWater() || flag;
+        return this.isInWater() || cachedFlag;
     }
+    // Hydrinity end
 
     void aK() {
         if (this.getVehicle() instanceof EntityBoat) {
@@ -1361,6 +1366,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     private void m() {
+        if (xyz.nkomarn.hydrinity.util.MathUtils.fastMod(ticksLived, xyz.nkomarn.hydrinity.HydrinityConfig.entitySubmergedCheck) != 0) return; // Hydrinity
         this.N = this.a((Tag) TagsFluid.WATER);
         this.O = null;
         double d0 = this.getHeadY() - 0.1111111119389534D;
diff --git a/src/main/java/net/minecraft/server/EntityItem.java b/src/main/java/net/minecraft/server/EntityItem.java
index bc4f84c8857aab45a69c915104de8d70b758698c..bd883a8ff150d24e6739e1ab201aa02a6f4c1762 100644
--- a/src/main/java/net/minecraft/server/EntityItem.java
+++ b/src/main/java/net/minecraft/server/EntityItem.java
@@ -82,7 +82,7 @@ public class EntityItem extends Entity {
 
             if (this.world.isClientSide) {
                 this.noclip = false;
-            } else {
+            } else if (xyz.nkomarn.hydrinity.util.MathUtils.fastMod(ticksLived, xyz.nkomarn.hydrinity.HydrinityConfig.itemBlockCollisionCheck) == 0) { // Hydrinity
                 this.noclip = !this.world.getCubes(this);
                 if (this.noclip) {
                     this.l(this.locX(), (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0D, this.locZ());
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 9ee74a39cbb624d6893045d4eed9624a616f78f8..887a2f613c2ac759a3ccdc773978897c81e6b469 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -268,7 +268,7 @@ public abstract class EntityLiving extends Entity {
         boolean flag = this instanceof EntityHuman;
 
         if (this.isAlive()) {
-            if (this.inBlock()) {
+            if (xyz.nkomarn.hydrinity.util.MathUtils.fastMod(ticksLived, xyz.nkomarn.hydrinity.HydrinityConfig.entitySuffocationCheck) == 0 && this.inBlock()) { // Hydrinity - configurable suffocation check interval
                 this.damageEntity(DamageSource.STUCK, 1.0F);
             } else if (flag && !this.world.getWorldBorder().a(this.getBoundingBox())) {
                 double d0 = this.world.getWorldBorder().a((Entity) this) + this.world.getWorldBorder().getDamageBuffer();
diff --git a/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java b/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
index 071c9259d93a2ad628a3c0ff2b439187122399df..1d3e410678e526164ff33c1adc0adaf4a2554ce6 100644
--- a/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
+++ b/src/main/java/xyz/nkomarn/hydrinity/HydrinityConfig.java
@@ -116,8 +116,16 @@ public class HydrinityConfig {
     }
 
     public static int playerTimeStatisticsInterval = 1;
+    public static int entitySuffocationCheck = 1;
+    public static int entityWaterCheck = 1;
+    public static int entitySubmergedCheck = 1;
+    public static int itemBlockCollisionCheck = 1;
     private static void intervals() {
         playerTimeStatisticsInterval = Math.max(1, getInt("settings.intervals.player-time-statistics", 1));
+        entitySuffocationCheck = Math.max(1, getInt("settings.intervals.entity-suffocation-check", 1));
+        entityWaterCheck = Math.max(1, getInt("settings.intervals.entity-water-check", 1));
+        entitySubmergedCheck = Math.max(1, getInt("settings.intervals.entity-submerged-check", 1));
+        itemBlockCollisionCheck = Math.max(1, getInt("settings.intervals.item-block-collision-check", 1));
     }
 
     public static final class WorldConfig {
